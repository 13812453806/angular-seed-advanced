const webpack = require('webpack');
const nsWebpack = require('nativescript-dev-webpack');
const path = require('path');
const CopyWebpackPlugin = require('copy-webpack-plugin');
const ExtractTextPlugin = require('extract-text-webpack-plugin');
const AotPlugin = require('@ngtools/webpack').AotPlugin;

const nativescriptTarget = require('nativescript-dev-webpack/nativescript-target');

module.exports = function(platform, destinationApp) {
  if (!destinationApp) {
    //Default destination inside platforms/<platform>/...
    destinationApp = nsWebpack.getAppPath(platform);
  }

  // Setup the tnsLoader
  const tnsLoader = {
    loader: 'tns-loader',
    options: {
      // data file is for now generated by the 'gulp build.js.tns'-task.
      data: require('./app/build-config.json'),
    },
  };

  const entry = {};
  //Discover entry module from package.json
  entry.bundle = './' + nsWebpack.getEntryModule();
  //Vendor entry with third party libraries.
  // TODO: create a vendor bundle
  entry.vendor = './vendor';
  //app.css bundle
  entry['app.css'] = './app.' + platform + '.css';

  return {
    context: path.resolve('./app'),
    target: nativescriptTarget,
    entry: entry,
    output: {
      pathinfo: true,
      path: path.resolve(destinationApp),
      libraryTarget: 'commonjs2',
      filename: '[name].js',
    },
    resolve: {
      //Resolve platform-specific modules like module.android.js
      extensions: [
        '.aot.ts',
        '.ts',
        '.js',
        '.css',
        '.' + platform + '.ts',
        '.' + platform + '.js',
        '.' + platform + '.css',
      ],
      //Resolve {N} system modules from tns-core-modules
      modules: [
        'node_modules/tns-core-modules',
        'node_modules'
      ]
    },
    resolveLoader: {
      alias: {
        'raw': path.join(__dirname, 'node_modules/raw-loader'),
        'tns-loader': path.join(__dirname, 'tools', 'webpack', 'tns-loader.js'),
      }
    },
    node: {
      //Disable node shims that conflict with NativeScript
      'http': false,
      'timers': false,
      'setImmediate': false,
    },
    module: {
      rules: [{
          test: /\.html$/,
          use: [
            tnsLoader,
            'raw',
          ]
        },
        // Root app.css file gets extracted with bundled dependencies
        {
          test: /app\.css$/,
          use: ExtractTextPlugin.extract([
            'resolve-url-loader',
            'css-loader',
            'nativescript-dev-webpack/platform-css-loader',
          ]),
        },
        // Other CSS files get bundled using the raw loader
        {
          test: /\.css$/,
          exclude: /app\.css$/,
          use: [
            tnsLoader,
            'raw',
          ]
        },
        // Compile TypeScript files with ahead-of-time compiler.
        {
          test: /\.ts$/,
          use: [
            tnsLoader,
            '@ngtools/webpack',
            'nativescript-dev-webpack/tns-aot-loader',
          ]
        },

        /*
         * Json loader support for *.json files.
         *
         * See: https://github.com/webpack/json-loader
         */
        {
          test: /\.json$/,
          use: 'json-loader'
        },

        // SASS support
        {
          test: /\.scss$/,
          use: [
            'raw',
            'resolve-url-loader',
            'sass-loader'
          ]
        },

        /* File loader for supporting images, for example, in CSS files.
         */
        {
          test: /\.(jpg|png|gif)$/,
          use: 'file-loader'
        }
      ],
    },
    plugins: [
      new ExtractTextPlugin('app.css'),
      //Vendor libs go to the vendor.js chunk
      new webpack.optimize.CommonsChunkPlugin({
        name: ['vendor']
      }),
      //Define useful constants like TNS_WEBPACK
      new webpack.DefinePlugin({
        global: 'global',
        __dirname: '__dirname',
        'global.TNS_WEBPACK': 'true',
      }),
      //Copy assets to out dir. Add your own globs as needed.
      new CopyWebpackPlugin([{
        from: 'app.' + platform + '.css',
        to: 'app.css'
      }, {
        from: 'css/**'
      }, {
        from: '**/*.jpg'
      }, {
        from: '**/*.png'
      }, {
        from: '**/*.xml'
      }, {
        from: 'assets',
        to: 'assets',
        type: 'dir',
      } ], {
        ignore: ['App_Resources/**']
      }),
      //Generate a bundle starter script and activate it in package.json
      new nsWebpack.GenerateBundleStarterPlugin([
        './vendor',
        './bundle',
      ]),
      //Angular AOT compiler
      new AotPlugin({
        tsConfigPath: 'tsconfig.aot.json',
        entryModule: 'app/native.module#NativeModule',
        typeChecking: false
      })
    ],
  };
};
